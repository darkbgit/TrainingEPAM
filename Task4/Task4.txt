Менеджеры сохраняют информацию о продажах за день в CSV файле стандартного формата. Файл помещается в папку на сервере. На сервере приложение, запущенное как служба Windows отслеживает изменения в папке и, при появлении в ней новых файлов, выполняет их разбор и загрузку информации из них в базу данных. Файлы загружаются на сервер не менее одного раза в день. Имя файла состоит из фамилии менеджера и даты в следующем формате.
SeconName_DDMMYYYY.csv, например Ivanov_19112012.csv
CSV файл имеет следующую структуру
Дата,Клиент,Товар,Сумма
Данные из этих столбцов должны быть загружены в базу. Структуру БД продумать и реализовать самостоятельно. 

Требования к приложению
- возможность запускать экземпляр приложения и из консоли, и как службу Windows
- должна присутствовать возможность обработки двух и более файлов одновременно. Для этого можно использовать стандартные средства C# для работы с потоками (Threads, TPL).
- работа с базой данных должна происходить только с использованием ORM (можно выбирать любую понравившуюся), прямая работа с БД не допускается.
- N-уровневая архитектура приложения
- Использование исключений
- Управление ресурсами и использование интерфейса IDisposable
- Использование конфигурации или ресурсов для храниения настроек приложения/службы "

Общее описание задачи
Разработать приложение для преобразования информации о продажах товаров за день из CSV файла стандартного формата. Запущенное приложение отслеживает изменения в папке и, при появлении в ней новых файлов, выполняет их разбор и загрузку информации из них в базу данных. Файлы загружаются на сервер не менее одного раза в день. Имя файла состоит из фамилии менеджера и даты в следующем формате: SecondName_DDMMYYYY.csv, например Ivanov_19112012.csv
CSV файл имеет следующую структуру
Дата;Клиент;Товар;Сумма
Данные из этих столбцов должны быть загружены в базу. Структуру БД продумать и реализовать самостоятельно. 		

Требования
•	наличие клиентов двух видов: консольное приложение и служба Windows. В каждый момент времени может работать только один клиент. 	•	15
•	должна присутствовать возможность обработки двух и более файлов одновременно. Для этого можно использовать стандартные средства C# для работы с потоками (Threads, TPL). 	•	20
•	Реализовать механизм конкурентного доступа к БД (SELECT, INSERT, UPDATE) при обработке нескольких файлов одновременно.	•	15
•	работа с базой данных должна происходить только с использованием Entity Framework, прямая работа с БД не допускается.	•	10
•	модульность и N-уровневая архитектура приложения. Решение должно содержать сборки для: слоя доступа к данным, слоя бизнес-логики и слоев клиентов; реализация клиентов не должна приводить к изменению в предшествующих слоях.	•	15
•	классы должны быть реализованы с использованием ООП. 	•	10
•	yправление ресурсами и использование интерфейса IDisposable (файлы, объекты контекстов и т.д.)	•	10
•	использование конфигурации AppConfig для хранения настроек приложения/службы	•	5

Дополнительные требования 
•	использование исключений



